#!/bin/bash
##################################
#  Author1: Bruno Goncalves (www.biglinux.com.br) 
#  Author2: Barnabé di Kartola
#  Author3: Rafael Ruscher (rruscher@gmail.com)  
#  Date:    2022/02/28 
#  Modified:2022/07/10 
#
#  Description: Themes, Desktop and Ajust usage of BigLinux 
#
# Licensed by GPL V2 or greater
##################################

#Translation
export TEXTDOMAINDIR="/usr/share/locale"
export TEXTDOMAIN=biglinux-settings

# Don't group windows
xprop -id "$(xprop -root '\t$0' _NET_ACTIVE_WINDOW | cut -f 2)" -f WM_CLASS 8s -set WM_CLASS "$$"

#add BBV scripts
. /usr/share/bigbashview/bcc/shell/bbvFunctions

Performance=$"Desempenho"
Usability=$"Usabilidade"
OPEN=$"Abrir"

#lista de funções
listFunction=$(grep "() {" index.sh.htm | awk '{print $1}' | sed '/listFunction=/d')
listPerformance=$(echo "$listFunction" | grep "D_" )
listUsability=$(echo "$listFunction" | grep "U_" )
listButton=$(echo "$listFunction" | grep "B_" )

## Edit Star ##
## Edit Star ##

#Modo Performance
D_performance () {
name=$"Modo performance"
if [[ $DESKTOP_SESSION =~ plasma ]]; then
  if [[ "$(kreadconfig5 --file "$HOME/.config/kwinrc" --group "Compositing" --key "Enabled")" == "false" ]]; then
      checked="checked"
  else
      checked="unchecked"
  fi
# elif [[ $DESKTOP_SESSION =~ xfce ]]; then
# elif [[ $DESKTOP_SESSION =~ lxqt ]]; then
# elif [[ $DESKTOP_SESSION =~ bspwm ]]; then
# elif [[ $DESKTOP_SESSION =~ i3wm ]]; then
# elif [[ $DESKTOP_SESSION =~ windowmaker ]]; then
else
  checked=disabled
fi
}

#BTRFS sem fsync
D_fsync () {
name=$"BTRFS sem fsync"
if grep -q 'disable-fsync.so' /etc/ld.so.preload; then
    checked="checked"
else
    checked="unchecked"
fi
}

#Aceleração do Navegador
D_browserOptimize () {
name=$"Aceleração do navegador"
if [ -e "$HOME/.config/browser-optimize" ]; then
    checked="checked"
else
    checked="unchecked"
fi
}

B_braveSettings () {
name=$"Configurações do Brave"
removeAdvertisements=$"Remover propagandas"
supportCryptoCurrencies=$"Suportar criptomoedas"
export removeAdvertisements
export supportCryptoCurrencies
if [ -e /usr/lib/brave-browser/brave ] || [ -e /usr/lib/brave-bin/brave ] || [ -e /opt/brave-bin/brave ];then
    checked="primary"
else
    checked="primary disabled"
fi
}

B_configurePreload () {
name=$"Escolher programas a serem carregados na memória durante boot"
checked="primary"
}

#Led RGB Teclado
U_ledKeyboard () {
name=$"Ligar RGB do teclado"
if [ -e "$HOME/.config/ledkeyboard" ]; then
    checked="checked"
else
    checked="unchecked"
fi
}

#Botões da janela no lado esquerdo
U_WindowButtonsOnLeftSide () {
name=$"Botões da janela no lado esquerdo"
if [[ $DESKTOP_SESSION =~ plasma ]]; then
  if grep -q 'FSM' ~/.config/kwinrc; then
      checked="checked"
  else
      checked="unchecked"
  fi
# elif [[ $DESKTOP_SESSION =~ xfce ]]; then
#     if [ -z "$(grep SHMC  $HOME/.config/xfce4/xfconf/xfce-perchannel-xml/xfwm4.xml)" ];then
#         checked="checked"
#     else
#         checked="unchecked"
#     fi 
# elif [[ $DESKTOP_SESSION =~ lxqt ]]; then
# elif [[ $DESKTOP_SESSION =~ bspwm ]]; then
# elif [[ $DESKTOP_SESSION =~ 3wm ]]; then
# elif [[ $DESKTOP_SESSION =~ windowmaker ]]; then
else
  checked=disabled
fi
}

#Inverter rolagem do mouse
U_invertedMouseScroll () {
name=$"Rolagem do mouse invertida"
if [[ $DESKTOP_SESSION =~ plasma ]]; then
  if [ "$(kreadconfig5  --group "Mouse" --key "XLbInptNaturalScroll" --file "$HOME/.config/kcminputrc")" = "true" ]; then
      checked="checked"
  else
      checked="unchecked"
  fi
# elif [[ $DESKTOP_SESSION =~ xfce ]]; then
# elif [[ $DESKTOP_SESSION =~ lxqt ]]; then
# elif [[ $DESKTOP_SESSION =~ bspwm ]]; then
# elif [[ $DESKTOP_SESSION =~ i3wm ]]; then
# elif [[ $DESKTOP_SESSION =~ windowmaker ]]; then
else
  checked=disabled
fi
}

#Inverter rolagem do touchpad
U_invertedTouchpadScroll () {
name=$"Rolagem do touchpad invertida"
if [[ $DESKTOP_SESSION =~ plasma ]]; then
  if [ "$(kreadconfig5 --group "SynPS/2 Synaptics TouchPad" --key "naturalScroll" --file "$HOME/.config/touchpadxlibinputrc")" = "true" ]; then
      checked="checked"
  else
      checked="unchecked"
  fi
# elif [[ $DESKTOP_SESSION =~ xfce ]]; then
# elif [[ $DESKTOP_SESSION =~ lxqt ]]; then
# elif [[ $DESKTOP_SESSION =~ bspwm ]]; then
# elif [[ $DESKTOP_SESSION =~ i3wm ]]; then
# elif [[ $DESKTOP_SESSION =~ windowmaker ]]; then
else
  checked=disabled
fi
}

#Indexar Arquivos (Baloo)
U_searchFiles () {
name=$"Indexar arquivos"
if [[ $DESKTOP_SESSION =~ plasma ]]; then
  if LANG=C balooctl status 2>&1 | grep -q 'is running'; then
      checked="checked"
  else
      checked="unchecked"
  fi
# elif [[ $DESKTOP_SESSION =~ xfce ]]; then
# elif [[ $DESKTOP_SESSION =~ lxqt ]]; then
# elif [[ $DESKTOP_SESSION =~ bspwm ]]; then
# elif [[ $DESKTOP_SESSION =~ i3wm ]]; then
# elif [[ $DESKTOP_SESSION =~ windowmaker ]]; then
else
  checked=disabled
fi
}

#Bloquear edição da Area de Trabalho
U_lockWorkspace () {
name=$"Bloquear a edição da área de trabalho"
if [[ $DESKTOP_SESSION =~ plasma ]]; then
  if [ -e "$HOME/.config/lockplasma" ]; then
      checked="checked"
  else
      checked="unchecked"
  fi
# elif [[ $DESKTOP_SESSION =~ xfce ]]; then
# elif [[ $DESKTOP_SESSION =~ lxqt ]]; then
# elif [[ $DESKTOP_SESSION =~ bspwm ]]; then
# elif [[ $DESKTOP_SESSION =~ i3wm ]]; then
# elif [[ $DESKTOP_SESSION =~ windowmaker ]]; then
else
  checked=disabled
fi
}

#Ativar NumLock no boot
U_numLock () {
name=$"Ativar o NumLock ao ligar o sistema"
if [[ $DESKTOP_SESSION =~ plasma ]]; then
  if grep -q "Numlock=on" /etc/sddm.conf; then
      checked="checked"
  else
      checked="unchecked"
  fi
# elif [[ $DESKTOP_SESSION =~ xfce ]]; then
# elif [[ $DESKTOP_SESSION =~ lxqt ]]; then
# elif [[ $DESKTOP_SESSION =~ bspwm ]]; then
# elif [[ $DESKTOP_SESSION =~ i3wm ]]; then
# elif [[ $DESKTOP_SESSION =~ windowmaker ]]; then
else
  checked=disabled
fi
}

#Ocultar Grub
U_grub () {
name=$"Ocultar Gerenciador de Boot (GRUB)"
if grep -q "timeout_style=hidden" /etc/grub.d/30_os-prober; then
    checked="checked"
else
    checked="unchecked"
fi
}

#Disable auto-mount (big-mount)
U_bigMount () {
name=$"Montar partições automaticamente"
if systemctl -q is-enabled big-mount.service; then
    checked="checked"
else
    checked="unchecked"
fi
}

#Development Mode
U_developmentMode () {
name=$"Modo Desenvolvedor"
if grep -qE "development|beta" /etc/big-release; then
    if [ "$(LANG=C systemctl is-enabled development-mode.path)" = "enabled" ] ; then
        checked="checked"
    else
        checked="unchecked"
    fi
else
    checked="disabled"
fi
}


## Edite end ##
## Edite end ##

#HTML START
htmlStart
    #SECTION
    start="start" text="$Performance" fontSize="6" section
    for i in ${listPerformance[@]}; do $i;
    #     switch -icon icons/$i.svg -iconPx 20 -text "$name" -check $checked -run $i.run -border 1 -bgColor secondary -id $i -marginX 5 -paddingY 3
        icon="icons/${i}.svg" text="$name" check="$checked" run="./$i.run" border="1" id="$i" paddingVertical="3" switch
    done
    for i in ${listButton[@]}; do $i;
        start="start" id="$i" title="$name" modal
            run="./$i/$i.modal" modal
        end="end" modal
        icon="icons/$i.svg" text="$name" buttonText="$OPEN" id="$i" paddingVertical="3" border="1" buttonModal="modal" line_button
    done
    end="end" section
    start="start" text="$Usability" fontSize="6" section
    for i in ${listUsability[@]}; do $i;
    #     switch -icon icons/$i.svg -iconPx 20 -text "$name" -check $checked -run $i.run -border 1 -bgColor secondary -id $i -marginX 5 -paddingY 3
        icon="icons/${i}.svg" text="$name" check="$checked" run="./$i.run" border="1" id="$i" paddingVertical="3" switch
    done
    end="end" section
